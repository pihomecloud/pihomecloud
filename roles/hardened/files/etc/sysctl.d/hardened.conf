#{{ ansible_managed }}
#More ifos on https://benchmarks.cisecurity.org
#Setting the flag to 0 ensures that a system with multiple interfaces (for example, a hard
#proxy), will never be able to forward packets, and therefore, never serve as a router
net.ipv4.ip_forward = 0

#An attacker could use a compromised host to send invalid ICMP redirects to other router
#devices in an attempt to corrupt routing and have users access a system set up by the
#attacker as opposed to a valid system.
net.ipv4.conf.all.send_redirects = 0
net.ipv6.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv6.conf.default.send_redirects = 0

#Setting net.ipv4.conf.all.accept_source_route and
#net.ipv4.conf.default.accept_source_route to 0 disables the system from accepting
#source routed packets. Assume this system was capable of routing packets to Internet
#routable addresses on one interface and private addresses on another interface. Assume
#that the private addresses were not routable to the Internet routable addresses and vice
#versa. Under normal routing circumstances, an attacker from the Internet routable
#addresses could not use the system as a way to reach the private address systems. If,
#however, source routed packets were allowed, they could be used to gain access to the
#private address systems as the route could be specified, rather than rely on routing
#protocols that did not allow this routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

#Attackers could use bogus ICMP redirect messages to maliciously alter the system routing
#tables and get them to send packets to incorrect networks and allow your system packets
#to be captured.
net.ipv4.conf.all.accept_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

#It is still possible for even known gateways to be compromised. Setting
#net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table
#updates by possibly compromised known gateways.
net.ipv4.conf.all.secure_redirects = 0
net.ipv6.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.default.secure_redirects = 0

#Enabling this feature and logging these packets allows an administrator to investigate the
#possibility that an attacker is sending spoofed packets to their system.
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians=1

#Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for
#your network could be used to trick your host into starting (or participating) in a Smurf
#attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast
#messages with a spoofed source address. All hosts receiving this message and responding
#would send echo-reply messages back to the spoofed address, which is probably not
#routable. If many hosts respond to the packets, the amount of traffic on the network could
#be significantly multiplied.
net.ipv4.icmp_echo_ignore_broadcasts = 1

#Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
#to fill up a log file system with many useless error messages.
net.ipv4.icmp_ignore_bogus_error_responses = 1

#Setting these flags is a good way to deter attackers from sending your system bogus
#packets that cannot be responded to. One instance where this feature breaks down is if
#asymmetrical routing is employed. This would occur when using dynamic routing protocols
#(bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you
#will not be able to enable this feature without breaking the routing.
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

#Attackers use SYN flood attacks to perform a denial of service attacked on a system by
#sending many SYN packets without completing the three way handshake. This will quickly
#use up slots in the kernel's half-open connection queue and prevent legitimate connections
#from succeeding. SYN cookies allow the system to keep accepting valid connections, even if
#under a denial of service attack.
net.ipv4.tcp_syncookies=1

#It is recommended that systems not accept router advertisements as they could be tricked
#into routing traffic to compromised machines. Setting hard routes within the system
#(usually a single default route to a trusted router) protects the system from bad routes.
net.ipv4.conf.all.accept_ra = 0
net.ipv6.conf.all.accept_ra = 0
net.ipv4.conf.default.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0

#If IPv6 is not to be used, it is recommended that it be disabled to reduce the attack surface
#of the system.
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1


## protect against tcp time-wait assassination hazards
## drop RST packets for sockets in the time-wait state
## (not widely supported outside of linux, but conforms to RFC)
net.ipv4.tcp_rfc1337 = 1

# tcp timestamps
## + protect against wrapping sequence numbers (at gigabit speeds)
## + round trip time calculation implemented in TCP
## - causes extra overhead and allows uptime detection by scanners like nmap
## enable @ gigabit speeds
net.ipv4.tcp_timestamps=0

#Restricting access to kernel logs
kernel.dmesg_restrict = 1

#Restricting access to kernel pointers in the proc filesystem
kernel.kptr_restrict = 1



---
# tasks file for shinken
- name: create shinken group
  group: name=shinken state=present
- name: create shinken user
  user: name=shinken group=shinken createhome=no home=/var/lib/shinken system=yes shell=/usr/bin/nologin
- name: grant log permission to shinken
  user: name=shinken groups=log append=yes
- name: install python2-html via makepkg
  makepkg: name=python2-html state=latest
- name: install shinken dependency packages with pacman
  pacman: name={{item}} state=present
  with_items:
    - python2-bottle
    - monitoring-plugins
    - python2-helper
    - bc
    - python2-cherrypy
    - perl-dbi
    - perl-dbd-mysql
- name: install shinken via makepkg
  makepkg: name=shinken state=latest
- name: shinken init
  command: /usr/bin/shinken --init creates=/var/lib/shinken/.shinken.ini
  become: yes
  become_user: shinken
  become_method: sudo
- name: Check installed Shinken packages
  command: /usr/bin/shinken inventory
  register: shinken_inventory
  changed_when: False
  become: yes
  become_user: shinken
  become_method: sudo
- name: install webui2 with makepkg
  makepkg: name=shinken-modwebui2 state=latest git_source="https://github.com/pihomecloud/archlinux-shinken-modwebui2.git"
  notify: restart shinken
- name: install pickle-retention-file-scheduler with makepkg
  makepkg: name=shinken-pickle-retention-file-scheduler state=latest git_source="https://github.com/pihomecloud/archlinux-shinken-pickle-retention-file-scheduler.git"
  notify: restart shinken
- name: install perl-date-parse with makepkg
  makepkg: name=perl-date-parse state=latest
- name: install pickle-retention-file-generic with makepkg
  makepkg: name=shinken-pickle-retention-file-generic state=latest git_source="https://github.com/pihomecloud/archlinux-shinken-pickle-retention-file-generic.git"
  notify: restart shinken
- name: add webui2,PickleRetentionBroker in broker
  lineinfile: dest=/etc/shinken/brokers/broker-master.cfg regexp="^\s*modules" line="    modules webui2,PickleRetentionBroker"
  notify: restart shinken
- name: add pickle-retention-file in scheduler
  lineinfile: dest=/etc/shinken/schedulers/scheduler-master.cfg regexp="^\s*modules" line="    modules pickle-retention-file"
  notify: restart shinken
- name: add PickleRetentionArbiter in arbiters
  lineinfile: dest=/etc/shinken/arbiters/arbiter-master.cfg regexp="^\s*modules" line="    modules PickleRetentionArbiter"
  notify: restart shinken
- name: prompt shiken password
  pause: prompt="shinkenPassword for {{localuser}} is not defined, please enter the password for root in shinken set shinkenPassword in your playbook to avoid this"
  register: prompt_shinkenPassword
  when: shinkenPassword is not defined
- name: set shinken Password from input
  set_fact: shinkenPassword="{{prompt_shinkenPassword.user_input}}"
  when: shinkenPassword is not defined
- name: create localuser in shinken
  htpasswd: path=/etc/shinken/users name={{localuser}} password={{shinkenPassword}} owner=shinken group=shinken mode=0640
- name: delete /etc/shinken/contacts/guest.cfg
  file: path=/etc/shinken/contacts/guest.cfg state=absent
  notify: restart shinken
- name: set admin user
  lineinfile: dest="{{item.dest}}" regexp="{{item.regexp}}" line="{{item.line}}"
  with_items:
    - { dest: /etc/shinken/contacts/admin.cfg, regexp: "contact_name", line: "    contact_name    {{localuser}}" }
    - { dest: /etc/shinken/contacts/admin.cfg, regexp: "password", line: "    #password       admin" }
    - { dest: /etc/shinken/contactgroups/users.cfg, regexp: "members", line: "    members             {{localuser}}" }
    - { dest: /etc/shinken/contactgroups/admins.cfg, regexp: "members", line: "    members             {{localuser}}" }
  notify: restart shinken
- name: verify if letsencrypt cert generated
  stat: path=/etc/letsencrypt/live/{{shinkenUrl}}
  register: shinkenLetsEncryptCert
- name: verify if localca cert exists
  stat: path=/srv/ca/intermediate/certs/{{shinkenUrl}}.cert.pem
  register: shinkenLocalcaCert
- name: set certificate and key of shinken to letsencrypt
  set_fact: shinkenCert=/etc/letsencrypt/live/{{shinkenUrl}} shinkenKey=/etc/letsencrypt/key/{{shinkenUrl}}
  when: shinkenLetsEncryptCert.stat.exists
- name: set certificate and key of shinken to localca
  set_fact: shinkenCert=/srv/ca/intermediate/certs/{{shinkenUrl}}.cert.pem shinkenKey=/srv/ca/intermediate/private/{{shinkenUrl}}.key.nopass
  when: not shinkenLetsEncryptCert.stat.exists and shinkenLocalcaCert.stat.exists
- name: create self dummy signed cert because i don't have letsencrypt or localca, it's a shame
  shell: openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout /etc/nginx/ssl/{{shinkenUrl}}.key -out /etc/nginx/ssl/{{shinkenUrl}}.crt -batch -subj '/CN={{shinkenUrl}}/O=Acme/C=US' creates=/etc/nginx/ssl/{{shinkenUrl}}.crt
  when: not shinkenLetsEncryptCert.stat.exists and not shinkenLocalcaCert.stat.exists
- name: copy nginx configuration
  template: src=etc/nginx/conf.d/shinken.conf dest=/etc/nginx/conf.d/shinken.conf owner=root group=root mode=0640
  notify: reload nginx
- name: create naxsi configuration
  template: src=etc/nginx/naxsi/shinken.whitelist.rules dest=/etc/nginx/naxsi/shinken.whitelist.rules owner=root group=root mode=0640
  notify: reload nginx
- name: create custom monitoring directory
  file: path=/srv/monitoring/plugins/ owner=shinken group=shinken mode=o-rwx state=directory recurse=yes
- name: create monitoring utils links
  file: src=/usr/lib/monitoring-plugins/{{ item }} dest=/srv/monitoring/plugins/{{ item }} state=link
  with_items:
    - utils.pm
    - utils.sh
- name: Copy all files recursively under /etc/shinken/
  template: src={{ item }} dest={{ item|replace(role_path+'/templates/', '/') }} owner=shinken group=shinken mode=0640
  with_items:
    - "{{ lookup('pipe', 'find {{role_path}}/templates/etc/shinken/ -type f').split('\n') }}"
  notify: restart shinken
- name: Copy all files recursively under /srv/monitoring
  template: src={{ item }} dest={{ item|replace(role_path+'/templates/', '/') }} owner=shinken group=shinken mode=0750
  with_items: "{{ lookup('pipe', 'find {{role_path}}/templates/srv/monitoring/ -type f').split('\n') }}"
- name: set mysql password when mysqlPassword defined
  mysql_user.2.1: 
    user: "shinken_{{ lookup('password', 'credentials/' + ansible_hostname + '/' + role_name + '/shinken_mysql_user chars=ascii_letters,digits') }}"
    password: "{{ lookup('password', 'credentials/' + ansible_hostname + '/' + role_name + '/shinken_mysql_password') }}"
    priv: "*.*:USAGE"
    host: "localhost"
    login_user: root
    login_password: "{{mysqlPassword}}"
  when: mysqlPassword is defined
- name: restricting shinken network conf
  lineinfile: dest=/etc/shinken/daemons/{{item}}.ini regexp="host=" line="host=127.0.0.1"
  with_items:
    - brokerd
    - pollerd
    - reactionnerd
    - receiverd
    - schedulerd
  notify: restart shinken
- name: restricting shinken user
  lineinfile: dest=/etc/shinken/daemons/{{item}}.ini regexp="user=" line="user=shinken"
  with_items:
    - brokerd
    - pollerd
    - reactionnerd
    - receiverd
    - schedulerd
  notify: restart shinken
- name: restricting shinken group
  lineinfile: dest=/etc/shinken/daemons/{{item}}.ini regexp="group=" line="group=shinken"
  with_items:
    - brokerd
    - pollerd
    - reactionnerd
    - receiverd
    - schedulerd
  notify: restart shinken
- name: set user for arbitrer
  lineinfile: dest=/etc/shinken/shinken.cfg regexp="shinken_user=" line="shinken_user=shinken"
  notify: restart shinken
- name: set group for arbitrer
  lineinfile: dest=/etc/shinken/shinken.cfg regexp="shinken_group=" line="shinken_group=shinken"
  notify: restart shinken

- name: set shinken files and directories permissions
  file: state=directory recurse=yes path={{item}} owner=shinken group=shinken mode=o-rwx
  with_items:
    - /etc/shinken
    - /var/lib/shinken
    - /var/log/shinken
- name: start and enable shinken services
  service: name=shinken-{{item}} state=started enabled=yes
  with_items:
    - arbiter
    - poller
    - reactionner
    - scheduler
    - broker
    - receiver
- name: copy iptables rules for {{role_name}}
  template: src=etc/iptables/iptables.rules.d/role_{{role_name}}.rule dest=/etc/iptables/iptables.rules.d/ owner=root group=root mode=0700

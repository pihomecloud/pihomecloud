---
# tasks file for owncloud
- name: Install owncloud packages
  pacmanneeded: name={{item}} state=present
  with_items:
    - owncloud
    - libreoffice-still
- name: verify if letsencrypt cert generated
  stat: path=/etc/letsencrypt/live/{{owncloudUrl}}/fullchain.pem
  register: owncloudLetsEncryptCert
- name: set certificate and key to letsencrypt
  file: src={{item.src}} dest=/etc/nginx/ssl/{{item.dest}} state=link force=yes
  with_items:
    - { src: "/etc/letsencrypt/live/{{owncloudUrl}}/fullchain.pem", dest: "{{owncloudUrl}}.active.crt"}
    - { src: "/etc/letsencrypt/live/{{owncloudUrl}}/privkey.pem", dest: "{{owncloudUrl}}.active.key"}
  when: owncloudLetsEncryptCert.stat.exists
  notify: reload nginx
- name: verify if localca cert exists
  stat: path=/srv/ca/intermediate/certs/{{owncloudUrl}}.cert.pem
  register: owncloudLocalcaCert
- name: set certificate and key to localca
  file: src={{item.src}} dest=/etc/nginx/ssl/{{item.dest}} state=link force=yes
  with_items:
    - { src: "/srv/ca/intermediate/certs/{{owncloudUrl}}.cert.pem", dest: "{{owncloudUrl}}.active.crt"}
    - { src: "/srv/ca/intermediate/private/{{owncloudUrl}}.key.nopass", dest: "{{owncloudUrl}}.active.key"}
  when: not owncloudLetsEncryptCert.stat.exists and owncloudLocalcaCert.stat.exists
  notify: reload nginx
- name: create self dummy signed cert because i don't have letsencrypt or localca, it's a shame
  shell: openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout /etc/nginx/ssl/{{owncloudUrl}}.key -out /etc/nginx/ssl/{{owncloudUrl}}.crt -batch -subj '/CN={{owncloudUrl}}/O=Acme/C=US' creates=/etc/nginx/ssl/{{owncloudUrl}}.crt
  when: not owncloudLetsEncryptCert.stat.exists and not owncloudLocalcaCert.stat.exists
- name: set certificate and key to a non sense cert
  file: src={{item.src}} dest=/etc/nginx/ssl/{{item.dest}} state=link force=yes
  with_items:
    - { src: "/etc/nginx/ssl/{{owncloudUrl}}.crt", dest: "{{owncloudUrl}}.active.crt"}
    - { src: "/etc/nginx/ssl/{{owncloudUrl}}.key", dest: "{{owncloudUrl}}.active.key"}
  when: not owncloudLetsEncryptCert.stat.exists and not owncloudLocalcaCert.stat.exists
  notify: reload nginx
- name: create nginx configuration
  template: src=etc/nginx/conf.d/owncloud.conf dest=/etc/nginx/conf.d/owncloud.conf owner=root group=root mode=0640
  notify: reload nginx
- name: create naxsi configuration
  template: src=etc/nginx/naxsi/owncloud.whitelist.rules dest=/etc/nginx/naxsi/owncloud.whitelist.rules owner=root group=root mode=0640
  notify: reload nginx
- name: activate apcu
  lineinfile: dest=/etc/php/conf.d/apcu.ini regexp="extension=apcu.so" line="extension=apcu.so"
  notify: restart php-fpm
- name: activate apcu.enable_cli
  lineinfile: dest=/etc/php/conf.d/apcu.ini regexp="apc.enable_cli" line="apc.enable_cli=1"
  notify: restart php-fpm
- name: activate php exif
  copy: content="extension=exif.so" dest=/etc/php/conf.d/exif.ini owner=root group=root mode=0644
  notify: restart php-fpm
- name: add php header to config
  lineinfile: dest="{{ownCloudDir}}/config/config.php" line="<?php" create=yes owner=http group=http mode=0640
- name: add $CONFIG to config
  lineinfile: dest="{{ownCloudDir}}/config/config.php" line="$CONFIG = array (" insertafter="<?php"
- name: close owncloud config
  lineinfile: dest="{{ownCloudDir}}/config/config.php" line=");"
- name: configure owncloud
  lineinfile:
     dest: "{{ownCloudDir}}/config/config.php"
     regexp: "{{item.name}}"
     line: "  '{{item.name}}' => {{item.value}},"
     insertbefore: "\\);"
  with_items:
    - { name: datadirectory, value: "'{{ownCloudDDataDir}}'" }
    - { name: dbtype, value: "'mysql'" }
    - { name: dbhost, value: "'{{owncloudDBHost}}'" }
    - { name: dbuser, value: "'{{owncloudMySQLUser}}'" }
    - { name: dbname, value: "'{{owncloudDataBase}}'" }
    - { name: dbpassword, value: "'{{owncloudMySQLPassword}}'" }
    - { name: dbtableprefix, value: "'oc_'" }
    - { name: default_language, value: "'{{owncloudLocale}}'" }
    - { name: mail_domain, value: "'{{myDomain}}'" }
    - { name: mail_smtpmode, value: "'sendmail'" }
    - { name: check_for_working_htaccess, value: "true" }
    - { name: 'memcache.local', value: "'\\\\OC\\\\Memcache\\\\APCu'" }
#data is checked by stat because it can be a link to another directory (beware of open_basedir...)
- name: check if data exists
  stat: path="{{ownCloudDir}}/data"
  register: owncloudData
- name: create "{{ownCloudDir}}/data" if needed
  file: path="{{ownCloudDir}}/data" state=directory owner=http group=http mode=0750
  when: not owncloudData.stat.exists
- name: create "{{ownCloudDir}}/assets"
  file: path="{{ownCloudDir}}/assets" state=directory owner=http group=http mode=0750
- name: restrict directory permssions
  command: find {{ownCloudDir}} -type d ! -perm 0750 -exec chmod -c 0750 {} \;
  register: restrictOwncloudDirs
  changed_when: restrictOwncloudDirs.stdout
- name: restrict file permissions
  command: find {{ownCloudDir}}  -type f ! -perm 0640 -exec chmod -c 0640 {} \;
  register: restrictOwncloudFiles
  changed_when: restrictOwncloudFiles.stdout
- name: restrict files to root:http
  command: find {{ownCloudDir}} ! -path "{{ownCloudDir}}/apps*" ! -path "{{ownCloudDir}}/config*" ! -path "{{ownCloudDir}}/assets*" ! -path "{{ownCloudDir}}/data*" ! -path "{{ownCloudDir}}/themes*" \( ! -user root -o ! -group http \) -exec chown -c root:http {} \;
  register: restrictOwncloudRootHttp
  changed_when: restrictOwncloudRootHttp.stdout
- name: restrict files to http:http
  command: find "{{ownCloudDir}}/apps" "{{ownCloudDir}}/assets" "{{ownCloudDir}}/data" "{{ownCloudDir}}/config/" "{{ownCloudDir}}/themes" \( ! -user http -o ! -group http \) -exec chown -c http:http {} \;
  register: restrictOwncloudHttpHttp
  changed_when: restrictOwncloudHttpHttp.stdout
- name: allow write of config by owncloud
  file: path=/etc/webapps/owncloud/config owner=http group=http mode=770
- name: create database for owncloud
  mysql_db: name={{owncloudDataBase}} state=present login_user=root login_password={{mysqlPassword}}
- name: create database for owncloud
  mysql_db: name={{owncloudDataBase}} state=present login_user=root login_password={{mysqlPassword}}
- name: create owncloud mysql user with password
  mysql_user.2.1: user="{{owncloudMySQLUser}}" password="{{owncloudMySQLPassword}}" priv="{{owncloudDataBase}}.*:CREATE,DROP,ALTER,DELETE,INDEX,INSERT,SELECT,UPDATE,CREATE TEMPORARY TABLES" host="localhost" login_user=root login_password={{mysqlPassword}}
- name: install owncloud DB
  command: php  -d"open_basedir=/srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps/:/dev/urandom:/etc/webapps/owncloud/config{{owncloudAdditional_open_basedir}}" occ maintenance:install --database "mysql" --database-name "{{owncloudDataBase}}"  --database-user "{{owncloudMySQLUser}}" --database-pass "{{owncloudMySQLPassword}}" --admin-user "{{localuser}}" --admin-pass "{{owncloudAdminPassword}}" chdir={{ownCloudDir}} creates=/var/lib/mysql/owncloud/oc_properties.frm
  become: yes
  become_user: http
- name: update owncloud DB
  command: php -d"open_basedir=/srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps/:/dev/urandom:/etc/webapps/owncloud/config{{owncloudAdditional_open_basedir}}" occ upgrade chdir={{ownCloudDir}}
  become: yes
  become_user: http
  register: owncloudUpdate
  changed_when: "'Update successful' in owncloudUpdate.stdout"
  failed_when: (owncloudUpdate.rc != 3) or owncloudUpdate.stderr
- name: list enabled apps
  command: php -d"open_basedir=/srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps/:/dev/urandom:/etc/webapps/owncloud/config{{owncloudAdditional_open_basedir}}" occ app:list --output=json  chdir={{ownCloudDir}}
  register: owncloudAppListResult
  changed_when: false
  become: yes
  become_user: http
- set_fact: owncloudAppList="{{owncloudAppListResult.stdout | from_json}}"
- name: enable apps
  command: php -d"open_basedir=/srv/http/:/home/:/tmp/:/usr/share/pear/:/usr/share/webapps/:/dev/urandom:/etc/webapps/owncloud/config{{owncloudAdditional_open_basedir}}" occ app:enable {{item}}  chdir={{ownCloudDir}}
  become: yes
  become_user: http
  with_items: "{{owncloudApps}}"
  when: "owncloudAppList['disabled'][item] is defined"
